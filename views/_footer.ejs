</div>

<script type="text/javascript" src="/js/popper.js"></script>
<script type="text/javascript" src="/js/bootstrap.min.js"></script>
<script type="text/javascript" src="/js/jquery.mCustomScrollbar.js"></script>
<script type="text/javascript" src="/lib/slick/slick.min.js"></script>
<script type="text/javascript" src="/js/scrollbar.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.form/3.51/jquery.form.min.js"></script>
<script type="text/javascript" src="/js/script.js"></script>

<script src="https://www.gstatic.com/firebasejs/7.20.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/7.20.0/firebase-analytics.js"></script>
<script src="https://www.gstatic.com/firebasejs/7.20.0/firebase-messaging.js"></script>

<script>

  var firebaseConfig = {
    apiKey: "AIzaSyCITqzz-84--I-giejB2zEr-vkdDKhAVUQ",
    authDomain: "planfrank-df75c.firebaseapp.com",
    databaseURL: "https://planfrank-df75c.firebaseio.com",
    projectId: "planfrank-df75c",
    storageBucket: "planfrank-df75c.appspot.com",
    messagingSenderId: "446527978463",
    appId: "1:446527978463:web:435c4aff816cca6aa8226a",
    measurementId: "G-YW0PPZSHZH"
  };
  // Initialize Firebase
  firebase.initializeApp(firebaseConfig);
  firebase.analytics();
</script>

<script>
    // [START get_messaging_object]
    // Retrieve Firebase Messaging object.
    const messaging = firebase.messaging();
    // [END get_messaging_object]
    // [START set_public_vapid_key]
    // Add the public key generated from the console here.
    messaging.usePublicVapidKey('AIzaSyCITqzz-84--I-giejB2zEr-vkdDKhAVUQ');
    // [END set_public_vapid_key]
  
    // [START refresh_token]
    // Callback fired if Instance ID token is updated.
    messaging.onTokenRefresh(() => {
      messaging.getToken().then((refreshedToken) => {

        console.log(refreshedToken)

        console.log('Token refreshed.');
        // Indicate that the new Instance ID token has not yet been sent to the
        // app server.
        setTokenSentToServer(false);
        // Send Instance ID token to app server.
        sendTokenToServer(refreshedToken);
        // [START_EXCLUDE]
        // Display new Instance ID token and clear UI of all previous messages.
        resetUI();
        // [END_EXCLUDE]
      }).catch((err) => {
        console.log('Unable to retrieve refreshed token ', err);
        showToken('Unable to retrieve refreshed token ', err);
      });
    });
    // [END refresh_token]
  
    // [START receive_message]
    // Handle incoming messages. Called when:
    // - a message is received while the app has focus
    // - the user clicks on an app notification created by a service worker
    //   `messaging.setBackgroundMessageHandler` handler.
    messaging.onMessage((payload) => {
      console.log('Message received. ', payload);
      // [START_EXCLUDE]
      // Update the UI to include the received message.
      appendMessage(payload);
      // [END_EXCLUDE]
    });
    // [END receive_message]
  
    function resetUI() {
      clearMessages();
      showToken('loading...');
      // [START get_token]
      // Get Instance ID token. Initially this makes a network call, once retrieved
      // subsequent calls to getToken will return from cache.
      messaging.getToken().then((currentToken) => {
        if (currentToken) {
          sendTokenToServer(currentToken);
          updateUIForPushEnabled(currentToken);
        } else {
          // Show permission request.
          console.log('No Instance ID token available. Request permission to generate one.');
          // Show permission UI.
          updateUIForPushPermissionRequired();
          setTokenSentToServer(false);
        }
      }).catch((err) => {
        console.log('An error occurred while retrieving token. ', err);
        showToken('Error retrieving Instance ID token. ', err);
        setTokenSentToServer(false);
      });
      // [END get_token]
    }
  
  
    function showToken(currentToken) {
      // Show token in console and UI.
      const tokenElement = document.querySelector('#token');
      tokenElement.textContent = currentToken;
    }
  
    // Send the Instance ID token your application server, so that it can:
    // - send messages back to this app
    // - subscribe/unsubscribe the token from topics
    function sendTokenToServer(currentToken) {
      if (!isTokenSentToServer()) {
        console.log('Sending token to server...');
        // TODO(developer): Send the current token to your server.
        setTokenSentToServer(true);
      } else {
        console.log('Token already sent to server so won\'t send it again ' +
            'unless it changes');
      }
  
    }
  
    function isTokenSentToServer() {
      return window.localStorage.getItem('sentToServer') === '1';
    }
  
    function setTokenSentToServer(sent) {
      window.localStorage.setItem('sentToServer', sent ? '1' : '0');
    }
  
    function showHideDiv(divId, show) {
      const div = document.querySelector('#' + divId);
      if (show) {
        div.style = 'display: visible';
      } else {
        div.style = 'display: none';
      }
    }
  
    function requestPermission() {
      console.log('Requesting permission...');
      // [START request_permission]
      Notification.requestPermission().then((permission) => {
        if (permission === 'granted') {
          console.log('Notification permission granted.');
          // TODO(developer): Retrieve an Instance ID token for use with FCM.
          // [START_EXCLUDE]
          // In many cases once an app has been granted notification permission,
          // it should update its UI reflecting this.
          resetUI();
          // [END_EXCLUDE]
        } else {
          console.log('Unable to get permission to notify.');
        }
      });
      // [END request_permission]
    }

  </script>



<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>
<script>
    var socket = io();
    (function () {
        socket.on('newPlan', function (data) {
            $(".bottom-160").css('display','block')
        });
    })();

    $(document).ready(function() 
    {
        $.ajax({
            type: "post",
            url: "/newsFeed/InterestList",
            success: function (response) {
                let options = `<option value="0">Select Plan Category</option>`
                let InterestData = response.data;
                InterestData.forEach(e => {
                    options += `<option value="${e._id}||${e.intrest_name}">${e.intrest_name}</option>`
                });
                $("#planCategory").html(options)
            },
            error: function (e) {
                alert("Contact Support Partner: " + JSON.stringify(e));
            }
        });
    
        $.ajax({
                type: "post",
                url: "/newsFeed/trendingPlan",
                success: function (response) {
                    const planData = response.data;
                    let postData ='';
                    planData.forEach(e => {
                        postData +=	`<div class="user-profy slick-slide" style="width: 280px;" data-slick-index="4" aria-hidden="true" tabindex="-1">
                            <img src="images/resources/user2.png" alt="">
                            <h3>${e.postedBy.name}</h3>
                            <span>${e.postedFrom}</span>
                            <ul class="skill-tags">
                                <li><a href="javascript:void(0);" title="">Sports</a></li>
                            </ul>
                            <a href="/plan/singlePlan/${e._id}" title="" tabindex="-1">View Plan</a>
                        </div>`
                    });
                    $("#trendingPlans").html(postData)
                    initilize()
                },
                error: function (e) {
                    alert("Contact Support Partner: " + JSON.stringify(e));
                }
        });
    
        getpinPost()
    });
</script>
</body>
</html>